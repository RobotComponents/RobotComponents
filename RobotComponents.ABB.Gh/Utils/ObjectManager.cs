// SPDX-License-Identifier: GPL-3.0-or-later
// This file is part of Robot Components
// Project: https://github.com/RobotComponents/RobotComponents
//
// Copyright (c) 2020-2024 Arjen Deetman
//
// Authors:
//   - Arjen Deetman (2021-2024)
//
// For license details, see the LICENSE file in the project root.

// System Libs
using System;
using System.Collections.Generic;
// Grasshopper Libs
using Grasshopper.Kernel;
// RobotComponents Libs
using RobotComponents.ABB.Actions.Declarations;
using RobotComponents.ABB.Gh.Components.Utilities;

namespace RobotComponents.ABB.Gh.Utils
{
    /// <summary>
    /// The Object Manager keeps track of different variables to enable global funcionalities inside Grasshopper
    /// </summary>
    public class ObjectManager
    {
        #region fields
        private readonly string _id;
        private readonly Dictionary<Guid, GH_Component> _components = new Dictionary<Guid, GH_Component>();
        private readonly Dictionary<Guid, CheckVariableNamesComponent> _checkVariableNamesComponents = new Dictionary<Guid, CheckVariableNamesComponent>();
        private readonly List<string> _names = new List<string>() { "tool0", "wobj0", "load0" };
        private bool _isCheckingVariableNames = true;
        #endregion

        #region constructors
        /// <summary>
        /// Creates an empty object manager. 
        /// </summary>
        internal ObjectManager(string id)
        {
            _id = id;

            _names.AddRange(SpeedData.ValidPredefinedNames);
            _names.AddRange(ZoneData.ValidPredefinedNames);
        }
        #endregion

        #region methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return "Object Manager (" + _id + ")";
        }

        /// <summary>
        /// Checks the variable names of the declaration that are generated by the given component.
        /// </summary>
        /// <param name="component"> The component that generates the variable names. </param>
        internal void CheckVariableNames(GH_Component component)
        {
            if (component is IObjectManager managedComponent)
            {
                if (_isCheckingVariableNames)
                {
                    // Adds component to collection
                    if (!_components.ContainsKey(component.InstanceGuid))
                    {
                        _components.Add(component.InstanceGuid, component);
                    }

                    // Remove registered variable names
                    for (int i = 0; i < managedComponent.Registered.Count; i++)
                    {
                        _names.Remove(managedComponent.Registered[i]);
                    }

                    managedComponent.Registered.Clear();
                    _names.Remove(managedComponent.LastName);
                    managedComponent.IsUnique = true;

                    // Run SolveInstance on other components with no unique name to check if their name is now available
                    UpdateComponents();

                    for (int i = 0; i < managedComponent.ToRegister.Count; i++)
                    {
                        // Duplicate varialble name
                        if (_names.Contains(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "The variable name \"" + managedComponent.ToRegister[i] + "\" is aleady in use.");
                            managedComponent.IsUnique = false;
                            managedComponent.LastName = "";
                            break;
                        }

                        // Empty variable name
                        else if (managedComponent.ToRegister[i] == string.Empty)
                        {
                            managedComponent.LastName = "";
                            break;
                        }

                        // Register unique variable names
                        else
                        {
                            managedComponent.Registered.Add(managedComponent.ToRegister[i]);
                            _names.Add(managedComponent.ToRegister[i]);

                            managedComponent.LastName = managedComponent.ToRegister[i];
                        }

                        // Checks if variable name exceeds max character limit for RAPID Code
                        if (HelperMethods.StringExeedsCharacterLimit32(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name exceeds character limit of 32 characters.");
                            break;
                        }

                        // Checks if variable name starts with a number
                        if (HelperMethods.StringStartsWithNumber(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name starts with a number which is not allowed in RAPID Code.");
                            break;
                        }

                        // Check for special characters
                        if (HelperMethods.StringHasSpecialCharacters(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name contains special characters which is not allowed in RAPID Code.");
                            break;
                        }
                    }
                }
                else
                {
                    // Set to to false since the values are not checked
                    managedComponent.IsUnique = false;

                    for (int i = 0; i < managedComponent.ToRegister.Count; i++)
                    {
                        // Checks if variable name exceeds max character limit for RAPID Code
                        if (HelperMethods.StringExeedsCharacterLimit32(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name exceeds character limit of 32 characters.");
                            break;
                        }

                        // Checks if variable name starts with a number
                        if (HelperMethods.StringStartsWithNumber(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name starts with a number which is not allowed in RAPID Code.");
                            break;
                        }

                        // Check for special characters
                        if (HelperMethods.StringHasSpecialCharacters(managedComponent.ToRegister[i]))
                        {
                            component.AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Variable name contains special characters which is not allowed in RAPID Code.");
                            break;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Deletes data from the object manager that was registered by the given component. 
        /// </summary>
        /// <param name="component"> The component that registered data. </param>
        internal void DeleteManagedData(GH_Component component)
        {
            if (component is IObjectManager managedComponent)
            {
                if (managedComponent.IsUnique == true)
                {
                    for (int i = 0; i < managedComponent.Registered.Count; i++)
                    {
                        _names.Remove(managedComponent.Registered[i]);
                    }
                }

                _components.Remove(component.InstanceGuid);

                if (_isCheckingVariableNames)
                {
                    UpdateComponents();
                }
            }
        }

        /// <summary>
        /// Runs Solve Instance on all other components to check if the variable names are unique.
        /// </summary>
        private void UpdateComponents()
        {
            foreach (KeyValuePair<Guid, GH_Component> entry in _components)
            {
                if (entry.Value is IObjectManager component)
                {
                    if (component.IsUnique == false)
                    {
                        entry.Value.ExpireSolution(true);
                    }
                }
            }
        }

        /// <summary>
        /// Returns a list with the registered variable names. 
        /// </summary>
        /// <returns> List with registered variable names. </returns>
        public List<string> GetRegisteredVariableNames()
        {
            List<string> result = new List<string>() { };

            foreach (KeyValuePair<Guid, GH_Component> entry in _components)
            {
                if (entry.Value is IObjectManager component)
                {
                    result.AddRange(component.Registered);
                }
            }

            return result;
        }
        #endregion

        #region properties
        /// <summary>
        /// Gets the Robot Components document ID
        /// </summary>
        public string ID
        {
            get { return _id; }
        }

        /// <summary>
        /// Gets the dictionary with all the components used in this object manager. 
        /// The components are stored based on there unique GUID.
        /// </summary>
        public Dictionary<Guid, GH_Component> Components
        {
            get { return _components; }
        }

        /// <summary>
        /// Gets the dictionary with all the Check Variable Names components used in this object manager. 
        /// The components are stored based on there unique GUID.
        /// </summary>
        public Dictionary<Guid, CheckVariableNamesComponent> CheckVariableNamesComponents
        {
            get { return _checkVariableNamesComponents; }
        }

        /// <summary>
        /// Gets a list with all the unique variable names in this object manager.
        /// </summary>
        public List<string> Names
        {
            get { return _names; }
        }

        /// <summary>
        /// Gets or sets a value indicating if the variable names throughout the document are checked for duplicates. 
        /// </summary>
        public bool IsCheckingVariableNames
        {
            get 
            { 
                return _isCheckingVariableNames; 
            }
            set
            {
                bool _oldValue = _isCheckingVariableNames;
                _isCheckingVariableNames = value;
                if (_oldValue != value) { UpdateComponents(); };   
            }
        }
        #endregion
    }
}
